#summary Tips on porting to Native Client

This page describes how to port your code to Native Client. Although this page concentrates on porting projects that use [http://www.gnu.org/software/autoconf/ Autoconf], most of the information is also relevant to non-Autoconf projects.

*Contents:*
<wiki:toc />

*Note:* This page needs more examples and details. It also needs to point to a list of ports, with recommendations on where to start with various kinds of ports. If you have porting tips, please add them to this page as comments. For suggestions and discussions, please use the [http://groups.google.com/group/native-client-discuss Native Client Discuss group]. 

== Porting a project that uses Autoconf ==

This section shows one approach to porting projects that have Autoconf-produced `configure` files. 
The main idea is to generate an acceptable Makefile,
hand-editing the `configure` file (but not the Makefile) if necessary.

*Note:* The "right" way to port a project that uses Autoconf is to edit `configure.in` or `configure.ac`, and then feed that file to `autoconf` to produce the `configure` file. Feel free to do that if you're familiar with Autoconf (or want to be).

<ol>
<li> Find the `config.sub` and `configure` files. Both files are often in the topmost directory of a software project's hierarchy.
</li>

<li> Add Native Client to `config.sub`.
<ol type="a">

<li> Add the following to the end of the `case $os` section for recognizing "common machines as not being operating systems":
{{{
-nacl*)
        basic_machine=i686-pc
        os=-nacl
        ;;
}}}
</li>
<li> Add nacl to the first group of "basic CPU types without the company name" -- just above `nios`, for example:
{{{
| nacl \
}}}
</li>
</ol>
</li>

<li> Use the standard configuration to generate the Makefile. Example:
{{{
./configure
}}}
</li>

<li> Looking at the Makefile, make a list of the things you'll probably have to change. Typically:
  <ul>
  <li> `gcc` -> `nacl-gcc` (except for any targets that use shared libraries; avoid those targets) </li>
  <li> `ar` -> `nacl-ar`,  `ranlib` -> `nacl-ranlib`, etc.</li>
  <li> `g++` -> `nacl-g++` </li>
  <li> compile with `-O3` optimization</li>
  <li> consider using the `-d` compile flag (but remove it later!) </li>
  <li> specify the paths to the Native Client SDK libraries and executables (such as by setting `prefix`)</li>
  <li> remove all dependencies on shared libraries </li>
  <li> if the resulting object file is executed (by means of `ac_try`, for example) use `sel_ldr` to execute it. Note that there is no sel_ldr under nacl_sdk; you'll need to copy it there or use the version in your Native Client download. Example: `cp <install_dir>/nacl/googleclient/native_client/scons-out/opt-linux/staging/sel_ldr /usr/local/nacl-sdk/nacl/bin`</li>
  </ul>

</li>

<li> <p>Figure out which command-line options you'll need to specify to `configure`. You might need to look at `Makefile` and `configure`, as well as your list of probable changes.</p>
</li>

<li> If no `configure` option exists to make a change you need, edit the `configure` file. For example, you might need to change the `ac_try` line in the `configure` file so that it uses `sel_ldr`:
{{{
-  if { ac_try='./$ac_file'
+  if { ac_try='$EMULATOR_FOR_BUILD ./$ac_file'
}}}
</li>

<li> Generate your Makefile, using the command-line options you determined previously plus the following: `--enable-static --enable-shared=no --host=nacl`. Example:
{{{
./configure CC=/usr/local/nacl-sdk/bin/nacl-gcc \
  CXX=/usr/local/nacl-sdk/bin/nacl-g++ \
  EMULATOR_FOR_BUILD=/usr/local/nacl-sdk/nacl/bin/sel_ldr \
  --enable-static --enable-shared=no --host=nacl \
  CFLAGS="-O3" --prefix=/usr/local/nacl-sdk
}}}
</li>

<li> Try building, using the Makefile you just generated. Example:
{{{
make
}}}
</li>

<li> If the build fails, note any compile errors. Try commenting out the offending code and rebuilding.
</li>

<li> Look at the `config.log` file to find more subtle errors and get information about the build.
</li>

<li> Once the build succeeds, try to run the example.
<wiki:comment>
[PENDING: put example here]
</wiki:comment>
</li>
</ol>

== Tips ==

<wiki:comment>
[PENDING: intro goes here]
</wiki:comment>

=== Eliminate file access ===

In particular, take out all code that refers to directories. We currently don't even have stubs for that.

Eventually, you need to remove all file access or substitute URLs for files.

<wiki:comment>
[PENDING: put example here]
</wiki:comment>

=== Use libunimpl if necessary ===

The `unimpl` library defines some POSIX routines that aren't implemented by Native Client. It can help you successfully compile programs that have calls to these unimplemented routines. Of course, you should make sure that your module doesn't really _depend_ on those calls.