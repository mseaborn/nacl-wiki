#summary Running Valgrind/Memcheck on NaCl

= Introduction =

It is possible to run [http://www.valgrind.org Valgrind/Memcheck] on NaCl. 
So far Valgrind is able to debug only the trusted code base. 
Later in 2010 we plan to enable testing the untrusted code too. 

Currently, Valgrind for NaCl is supported only on *Linux x86_64*.

= Terminology =  
  * *Valgrind* is a binary translation system. 
  * *Memcheck* is a Valgrind-based memory error detector which finds these bugs:
     * Memory leaks
     * Uninitialized memory reads
     * Out of bound memory accesses
     * Accesses to free-ed heap
     * Some more 

= Running Valgrind/Memcheck=
Currently, Valgrind for NaCl is supported only on Linux x86_64. From `native_client` directory you can run it like this: 
{{{
./scons MODE=nacl,dbg-linux   platform=x86-64  sdl=none  run_under=src/third_party/valgrind/bin/memcheck.sh,--log-file=mc.log scale_timeout=20  run_hello_world_test
}}}

  * `run_under` allows you to pass the name of the tool under which you want to run tests. If the tool has options, pass them after comma: 'tool,--opt1,--opt2'. (the tool name and the parameters can not contain commas)
  * `scale_timeout=20` multiplies all timeouts by 20 (Remember, valgrind is slow!).
  * `src/third_party/valgrind/bin/memcheck.sh` is a modified valgrind binary which can run on NaCl. 
  * The most useful valgrind parameters: 
    * `--log-file=<file_name>`: put warnings to a file instead of `stderr`.
    * `--error-exitcode=<N>`: if at least one warning is reported, exit with this error code (by default, valgrind uses the program's exit code)
    * `--leak-check=no|yes|full`: Perform leak checking (default: yes)

For more options, see the [http://valgrind.org/docs/manual/mc-manual.html Memcheck manual] or type
{{{
src/third_party/valgrind/bin/memcheck.sh --help
}}}

= Implementation details =
Valgrind treats the NaCl process (`sel_ldr`) as any other regular Linux process. 
The only difference is when NaCl mmaps 84G for untrusted region, Valgrind ignores this allocation. 
So, initially, all memory within untrusted region is treated by Memcheck as unaccessible.

Later, we call [http://valgrind.org/docs/manual/mc-manual.html#mc-manual.clientreqs VALGRIND_MAKE_MEM_UNDEFINED] in few places in the trusted code to tell valgrind that a specific portion of those 84G is accessible. This annotation is applied to memory locations where we put the untrusted code. 

The rest of the memory in untrusted part is currently ignored by Memcheck because heap, stack and bss are marked with `mprotect` before the first use (right?). 
In order to find bugs in untrusted code we will have to annotate untrusted malloc with VALGRIND_MAKE_MEM_UNDEFINED. 

== Changes in valgrind ==
The patch to make valgrind work for NaCl (both trusted and untrusted code) is in progress. Here is a short summary. 

  * Allow mmap of 88G:
    * Change N_PRIMARY_BITS from 19 to 22 in memcheck/mc_main.c, set magic constants accordingly. 
    * Ignore all mmaps greater than 84G (notify_tool_of_mmap in coregrind/m_syswrap/syswrap-generic.c)
    * Set `aspacem_maxAddr = (Addr)0x4000000000 - 1; // 256G` (coregrind/m_aspacemgr/aspacemgr-linux.c)
  * Increase VG_N_SEGMENTS and VG_N_SEGNAMES.
  * Increase VG_N_THREADS in include/pub_tool_threadstate.h (from 500 to 10000). 
  * Notify Valgrind about the NaCl's untrusted memory region: 
    * add one more client request VG_USERREQ__NACL_MEM_START (coregrind/pub_core_clreq.h and coregrind/m_scheduler/scheduler.c)
    * Intercept NaCl's StopForDebuggerInit (coregrind/m_replacemalloc/vg_replace_malloc.c). 
  * Load debug info from .nexe file:
    * Modify di_notify_mmap (coregrind/m_debuginfo/debuginfo.c) 
  * valgrind.h: 
    * replace `long long` with uint64_t (otherwise NaCl won't be built with default gcc flags)
    * Align  __SPECIAL_INSTRUCTION_PREAMBLE using `.align 32\n\t`.
    * Align after VALGRIND_CALL_NOREDIR_RAX so that the return address is 32-byte aligned. 
    * Use `xchgq %%r14,%%r14\n\t` instead of  `xchgq %%rdx,%%rdx\n\t` in VALGRIND_CALL_NOREDIR_RAX
    * In `CALL_FN_*` use `sub $128,%%esp; addq %%r15,%%rsp`  instead of `subq $128,%%rsp`
  * VEX: when storing the return address for NaCl call-noredir (`xchgq %%r14,%%r14\n\t`) in VEX/priv/guest_amd64_toIR.c, make the address 32-byte aligned.
  


    


  